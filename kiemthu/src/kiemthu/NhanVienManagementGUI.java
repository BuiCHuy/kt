package kiemthu;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Iterator;

public class NhanVienManagementGUI extends JFrame {
	private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    private List<nhanvien> nhanVienList;
    private DefaultTableModel tableModel;
    private JTable nhanVienTable;

    // C√°c th√†nh ph·∫ßn GUI cho vi·ªác nh·∫≠p li·ªáu m·ªõi
    private JTextField hotenField, sdtField, diachiField, tkField, mkField, ngaysinhField, searchField;
    private JComboBox<String> gioitinhBox; // D√πng JComboBox cho Gi·ªõi t√≠nh
    private JButton addButton, editButton, deleteButton, searchButton, clearButton;
    String emessage;
    public NhanVienManagementGUI() {
        // 1. Kh·ªüi t·∫°o d·ªØ li·ªáu
        nhanVienList = new ArrayList<>();
        // Th√™m d·ªØ li·ªáu m·∫´u
        try {
            nhanVienList.add(new nhanvien("Nguy·ªÖn VƒÉn A", "Nam", dateFormat.parse("15/05/1990"), "0981234567", "H√† N·ªôi", "nva", "123"));
            nhanVienList.add(new nhanvien("Tr·∫ßn Th·ªã B", "N·ªØ", dateFormat.parse("20/12/1995"), "0909876543", "TP. HCM", "ttb", "456"));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        // 2. C√†i ƒë·∫∑t c·ª≠a s·ªï ch√≠nh (JFrame)
        setTitle("H·ªÜ TH·ªêNG QU·∫¢N L√ù NH√ÇN VI√äN (Th√¥ng tin chi ti·∫øt)");
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));

        // 3. T·∫°o Panel Nh·∫≠p li·ªáu (Ph√≠a B·∫Øc)
        JPanel inputPanel = createInputPanel();
        add(inputPanel, BorderLayout.NORTH);

        // 4. T·∫°o Panel B·∫£ng (Gi·ªØa)
        JScrollPane tableScrollPane = createTablePanel();
        add(tableScrollPane, BorderLayout.CENTER);

        // 5. C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o b·∫£ng l·∫ßn ƒë·∫ßu
        loadnhanvienDataToTable();

        // 6. G√°n c√°c h√†nh ƒë·ªông
        addButton.addActionListener(e -> addnhanvien());
        editButton.addActionListener(e -> editnhanvien());
        deleteButton.addActionListener(e -> deletenhanvien());
        searchButton.addActionListener(e -> searchnhanvien());
        clearButton.addActionListener(e -> clearFields());

        nhanVienTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && nhanVienTable.getSelectedRow() != -1) {
                fillFieldsFromTable();
            }
        });

        setVisible(true);
    }

    /**
     * T·∫°o Panel ch·ª©a c√°c √¥ nh·∫≠p li·ªáu v√† n√∫t ƒëi·ªÅu khi·ªÉn
     */
    private JPanel createInputPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createTitledBorder("Th√¥ng Tin Nh√¢n Vi√™n Chi Ti·∫øt & Thao T√°c"));

        // Ph·∫ßn 1: √î nh·∫≠p li·ªáu (s·ª≠ d·ª•ng GridLayout 4 h√†ng x 4 c·ªôt)
        JPanel dataPanel = new JPanel(new GridLayout(4, 4, 10, 5));

        // H√†ng 1
        dataPanel.add(new JLabel("H·ªç T√™n:"));
        hotenField = new JTextField(15);
        dataPanel.add(hotenField);

        dataPanel.add(new JLabel("Gi·ªõi T√≠nh:"));
        gioitinhBox = new JComboBox<>(new String[]{"","Nam", "N·ªØ"});
        dataPanel.add(gioitinhBox);

        // H√†ng 2
        dataPanel.add(new JLabel("Ng√†y Sinh (dd/MM/yyyy):"));
        ngaysinhField = new JTextField(10);
        dataPanel.add(ngaysinhField);
        
        dataPanel.add(new JLabel("SƒêT:"));
        sdtField = new JTextField(10);
        dataPanel.add(sdtField);

        // H√†ng 3
        dataPanel.add(new JLabel("ƒê·ªãa Ch·ªâ:"));
        diachiField = new JTextField(20);
        dataPanel.add(diachiField);

        dataPanel.add(new JLabel("T√†i Kho·∫£n:"));
        tkField = new JTextField(10);
        dataPanel.add(tkField);

        // H√†ng 4
        dataPanel.add(new JLabel("M·∫≠t Kh·∫©u:"));
        mkField = new JTextField(10);
        dataPanel.add(mkField);
        
        // √î tr·ªëng ho·∫∑c th√¥ng tin th√™m
        dataPanel.add(new JLabel("")); 
        dataPanel.add(new JLabel(""));

        panel.add(dataPanel, BorderLayout.CENTER);

        // Ph·∫ßn 2: N√∫t ch·ª©c nƒÉng (Ph√≠a ƒê√¥ng)
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        addButton = new JButton("‚ûï Th√™m M·ªõi");
        editButton = new JButton("‚úçÔ∏è C·∫≠p Nh·∫≠t");
        deleteButton = new JButton("‚ùå X√≥a");
        clearButton = new JButton("üßπ X√≥a Tr·ªëng");

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(clearButton);

        panel.add(buttonPanel, BorderLayout.EAST);

        // Ph·∫ßn 3: T√¨m ki·∫øm (Ph√≠a Nam)
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        searchField = new JTextField(25);
        searchButton = new JButton("üîç T√¨m Ki·∫øm");
        searchPanel.add(new JLabel("T√¨m ki·∫øm (H·ªç T√™n/SƒêT/ƒê·ªãa ch·ªâ):"));
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        JPanel fullInputPanel = new JPanel(new BorderLayout());
        fullInputPanel.add(panel, BorderLayout.CENTER);
        fullInputPanel.add(searchPanel, BorderLayout.SOUTH);

        return fullInputPanel;
    }

    /**
     * T·∫°o Panel ch·ª©a b·∫£ng hi·ªÉn th·ªã danh s√°ch nh√¢n vi√™n
     */
    private JScrollPane createTablePanel() {
        // ƒê·ªãnh nghƒ©a ti√™u ƒë·ªÅ c·ªôt m·ªõi
        String[] columnNames = {"H·ªç T√™n", "Gi·ªõi T√≠nh", "Ng√†y Sinh", "SƒêT", "ƒê·ªãa Ch·ªâ", "T√†i Kho·∫£n", "M·∫≠t Kh·∫©u"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        nhanVienTable = new JTable(tableModel);
        nhanVienTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        return new JScrollPane(nhanVienTable);
    }

    /**
     * C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ nhanVienList v√†o JTable
     */
    private void loadnhanvienDataToTable() {
        tableModel.setRowCount(0);

        for (nhanvien nv : nhanVienList) {
            Object[] row = new Object[]{
                nv.getHoten(),
                nv.getGioitinh(),
                nv.getNgaysinh() != null ? dateFormat.format(nv.getNgaysinh()) : "",
                nv.getSdt(),
                nv.getDiachi(),
                nv.getTk(),
                nv.getMk() // C·∫£nh b√°o b·∫£o m·∫≠t: M·∫≠t kh·∫©u kh√¥ng n√™n hi·ªÉn th·ªã
            };
            tableModel.addRow(row);
        }
    }

    /**
     * ƒêi·ªÅn d·ªØ li·ªáu t·ª´ h√†ng ƒë∆∞·ª£c ch·ªçn v√†o c√°c √¥ nh·∫≠p li·ªáu
     */
    private void fillFieldsFromTable() {
        int selectedRow = nhanVienTable.getSelectedRow();
        if (selectedRow != -1) {
            hotenField.setText(tableModel.getValueAt(selectedRow, 0).toString());
            gioitinhBox.setSelectedItem(tableModel.getValueAt(selectedRow, 1).toString());
            ngaysinhField.setText(tableModel.getValueAt(selectedRow, 2).toString());
            sdtField.setText(tableModel.getValueAt(selectedRow, 3).toString());
            diachiField.setText(tableModel.getValueAt(selectedRow, 4).toString());
            tkField.setText(tableModel.getValueAt(selectedRow, 5).toString());
            mkField.setText(tableModel.getValueAt(selectedRow, 6).toString());

            // Trong v√≠ d·ª• n√†y, coi H·ªç T√™n l√† kh√≥a ch√≠nh, kh√¥ng cho s·ª≠a khi ƒëang s·ª≠a
            hotenField.setEditable(false);
        }
    }

    /**
     * X√≥a n·ªôi dung trong c√°c √¥ nh·∫≠p li·ªáu
     */
    private void clearFields() {
        hotenField.setText("");
        gioitinhBox.setSelectedIndex(0);
        ngaysinhField.setText("");
        sdtField.setText("");
        diachiField.setText("");
        tkField.setText("");
        mkField.setText("");
        hotenField.setEditable(true);
        nhanVienTable.clearSelection();
        loadnhanvienDataToTable();
    }

    // =============================================================
    // CH·ª®C NƒÇNG X·ª¨ L√ù D·ªÆ LI·ªÜU
    // =============================================================
    
    
    private boolean Validate() {
    	String ht = hotenField.getText();
    	String gt = gioitinhBox.getSelectedItem().toString();
    	String ns = ngaysinhField.getText().trim();
    	String sdt = sdtField.getText().trim();
	    String diachi = diachiField.getText().trim();
	    String tk = tkField.getText().trim();
	    String mk = mkField.getText().trim();
	    String regex = "^[a-zA-Z\\s\\p{L}]+$";
	    LocalDate dob; 
	    // validate t√™n nh√¢n vi√™n
	    if(ht.isEmpty()) {
	    	emessage = "Vui l√≤ng nh·∫≠p t√™n nh√¢n vi√™n" ;
	    	return false;
	    }
	    else if(!ht.matches(regex)) {
	    	emessage = "T√™n nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát";
	    	return false;
	    }
	    else if(ht.length()>30) {
	    	emessage = "Vui l√≤ng nh·∫≠p h·ªç t√™n kh√¥ng qu√° 30 k√Ω t·ª±";
	    	return false;
	    }
	    // validate gi·ªõi t√≠nh
	    if(gt=="") {
	    	emessage = "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh";
	    	return false;
	    }
	    
	    // validate ng√†y sinh
	    if(ns.isEmpty()) {
	    	emessage = "Vui l√≤ng nh·∫≠p ng√†y sinh";
	    }
	    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd"); 
	 
		 try {
		     dob = LocalDate.parse(ns, formatter);
		         
		     if (dob.isAfter(LocalDate.now())) {
		         emessage = "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c l√† ng√†y trong t∆∞∆°ng lai";
		         return false;
		     }
		         
		 } catch (DateTimeParseException ex) {
		     emessage = "Ng√†y sinh kh√¥ng h·ª£p l·ªá (ƒê·ªãnh d·∫°ng YYYY/MM/DD ho·∫∑c ng√†y th√°ng kh√¥ng t·ªìn t·∫°i)";
		     return false;
		 }
		 LocalDate minAgeDate = LocalDate.now().minusYears(18);   
	    if (dob.isAfter(minAgeDate)) {
	        emessage = "ƒê·ªô tu·ªïi kh√¥ng h·ª£p l·ªá. Nh√¢n vi√™n ph·∫£i t·ª´ 18 tu·ªïi tr·ªü l√™n";
	        return false;
	    }
		   
	    //validate sdt
	    if (sdt.isEmpty()) {
	        emessage = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
	        return false;
	    }
	    else if (!sdt.matches("\\d+")) {
	    	emessage = "S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± s·ªë";
	        return false;
	    }
	    else if(!sdt.startsWith("0")) {
	    	emessage  = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu t·ª´ s·ªë 0";
	        return false;
	    }
	    else if(sdt.length()!= 11 && sdt.length()!=10) {
	    	emessage  = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ho·∫∑c 11 ch·ªØ s·ªë";
	    	return false;
	    }
	    // validate cho ƒë·ªãa ch·ªâ
	    String addressPattern = "^[a-zA-Z0-9\\s\\p{L}/,.-]+$"; 
	    if(diachi.isEmpty()) {
	    	emessage  = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ";
	        return false;
	    }
	    else if(diachi.length()>100) {
	    	emessage = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ kh√¥ng qu√° 100 k√Ω t·ª±";
	    	return false;
	    }
	    else if(!diachi.matches(addressPattern)) {
	    	emessage = "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát";
	    	return false;
	    }
	    
	    //validate cho t√†i kho·∫£n
	    String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"; 
	    if(tk.isEmpty()) {
	    	emessage = "Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n";
	    	return false;
	    }
	    else if(tk.length()>30) {
	    	emessage = "Email kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 30 k√Ω t·ª±";
	    	return false;
	    }
	    else if(!tk.matches(emailPattern)) {
	    	emessage = "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng Email";
	    	return false;
	    }
	    for (nhanvien nv : nhanVienList) {
            if (nv.getTk().equalsIgnoreCase(tk)) {
                emessage = "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, vui l√≤ng nh·∫≠p email kh√°c";
                return false;
            }
        }
	    
	    //validate cho mk
	    boolean hasLetter = mk.matches(".*[a-zA-Z].*"); 
	    boolean hasDigit = mk.matches(".*\\d.*"); 
	    if(mk.isEmpty()) {
	    	emessage = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
	    	return false;
	    }
	    else if(mk.length()<6) {
	    	emessage = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±";
	    	return false;
	    }
	    else if(mk.length()>20) {
	    	emessage = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 20 k√Ω t·ª±";
	    	return false;
	    }
	    else if(mk.contains(" ")) {
	    	emessage = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng";
	    	return false;
	    }
	    
	    else if(!hasLetter||!hasDigit) {
	    	emessage = "M·∫≠t kh·∫©u ph·∫£i bao g·ªìm ch·ªØ c√°i v√† ch·ªØ s·ªë";
	    	return false;
	    }
	    return true;
    }

    /**
     * 1. Th√™m nh√¢n vi√™n
     */
    private void addnhanvien() {
    	if(!Validate()) {
    		JOptionPane.showMessageDialog(this,emessage);
    		return;
    	}
    	else {
    		try {
                String hoten = hotenField.getText().trim();
                String gioitinh = (String) gioitinhBox.getSelectedItem();
                Date ngaysinh = dateFormat.parse(ngaysinhField.getText());
                String sdt = sdtField.getText().trim();
                String diachi = diachiField.getText().trim();
                String tk = tkField.getText().trim();
                String mk = mkField.getText().trim();

                if (hoten.isEmpty() || sdt.isEmpty() || diachi.isEmpty() || tk.isEmpty() || mk.isEmpty()) {
                     JOptionPane.showMessageDialog(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.", "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
                     return;
                }
                
                // Ki·ªÉm tra tr√πng l·∫∑p H·ªç T√™n (coi nh∆∞ kh√≥a ch√≠nh t·∫°m th·ªùi)
                for (nhanvien nv : nhanVienList) {
                    if (nv.getHoten().equalsIgnoreCase(hoten)) {
                        JOptionPane.showMessageDialog(this, "Nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i (tr√πng H·ªç T√™n).", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                nhanvien newnhanvien = new nhanvien(hoten, gioitinh, ngaysinh, sdt, diachi, tk, mk);
                nhanVienList.add(newnhanvien);
                loadnhanvienDataToTable();
                clearFields();
                JOptionPane.showMessageDialog(this, "Th√™m nh√¢n vi√™n th√†nh c√¥ng.", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Ng√†y sinh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng dd/MM/yyyy.", "L·ªói ƒë·ªãnh d·∫°ng", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "L·ªói x·∫£y ra: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
    	}
        
    }

    /**
     * 2. S·ª≠a nh√¢n vi√™n
     */
    private void editnhanvien() {
        try {
            String hotenToEdit = hotenField.getText().trim();
            String newGioiTinh = (String) gioitinhBox.getSelectedItem();
            Date newNgaySinh = dateFormat.parse(ngaysinhField.getText());
            String newSdt = sdtField.getText().trim();
            String newDiachi = diachiField.getText().trim();
            String newTk = tkField.getText().trim();
            String newMk = mkField.getText().trim();

            for (nhanvien nv : nhanVienList) {
                if (nv.getHoten().equalsIgnoreCase(hotenToEdit)) {
                    nv.gioitinh = newGioiTinh;
                    nv.ngaysinh = newNgaySinh;
                    nv.sdt = newSdt;
                    nv.diachi = newDiachi;
                    nv.tk = newTk;
                    nv.mk = newMk;

                    loadnhanvienDataToTable();
                    clearFields();
                    JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng.", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ƒë·ªÉ s·ª≠a.", "L·ªói", JOptionPane.ERROR_MESSAGE);

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Ng√†y sinh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng dd/MM/yyyy.", "L·ªói ƒë·ªãnh d·∫°ng", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * 3. X√≥a nh√¢n vi√™n
     */
    private void deletenhanvien() {
        int selectedRow = nhanVienTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a t·ª´ b·∫£ng.", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y kh√¥ng?", "X√°c nh·∫≠n x√≥a", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            String hotenToDelete = tableModel.getValueAt(selectedRow, 0).toString();

            Iterator<nhanvien> iterator = nhanVienList.iterator();
            while (iterator.hasNext()) {
                nhanvien nv = iterator.next();
                if (nv.getHoten().equalsIgnoreCase(hotenToDelete)) {
                    iterator.remove();
                    loadnhanvienDataToTable();
                    clearFields();
                    JOptionPane.showMessageDialog(this, "X√≥a nh√¢n vi√™n th√†nh c√¥ng.", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
        }
    }

    /**
     * 4. T√¨m ki·∫øm nh√¢n vi√™n
     */
    private void searchnhanvien() {
        String keyword = searchField.getText().trim().toLowerCase();
        if (keyword.isEmpty()) {
            loadnhanvienDataToTable();
            return;
        }

        tableModel.setRowCount(0);

        for (nhanvien nv : nhanVienList) {
            if (nv.getHoten().toLowerCase().contains(keyword) ||
                nv.getSdt().contains(keyword) ||
                nv.getDiachi().toLowerCase().contains(keyword)) {

                Object[] row = new Object[]{
                    nv.getHoten(),
                    nv.getGioitinh(),
                    dateFormat.format(nv.getNgaysinh()),
                    nv.getSdt(),
                    nv.getDiachi(),
                    nv.getTk(),
                    nv.getMk()
                };
                tableModel.addRow(row);
            }
        }
    }

    // =============================================================
    // MAIN METHOD
    // =============================================================

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new NhanVienManagementGUI());
    }
}