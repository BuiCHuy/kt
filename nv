<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản Lý Nhân Viên</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .employee-photo {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
        }
        .table-actions {
            white-space: nowrap;
        }
        .search-section {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
<!-- Navigation -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <a class="navbar-brand" href="#">
            <i class="bi bi-people-fill me-2"></i>
            Hệ Thống Quản Lý Nhân Viên
        </a>
    </div>
</nav>

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Danh Sách Nhân Viên</h2>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addEmployeeModal">
            <i class="bi bi-plus-circle me-2"></i>Thêm Nhân Viên
        </button>
    </div>

    <!-- Search Section -->
    <div class="search-section">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo tên, số điện thoại...">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="genderFilter">
                    <option value="">Tất cả giới tính</option>
                    <option value="Nam">Nam</option>
                    <option value="Nữ">Nữ</option>
                </select>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                    <i class="bi bi-arrow-clockwise me-2"></i>Làm mới
                </button>
            </div>
        </div>
    </div>

    <!-- Employee Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-primary">
                    <tr>
                        <th>Mã NV</th>
                        <!-- CHANGE: Removed photo column -->
                        <th>Họ Tên</th>
                        <th>Giới Tính</th>
                        <th>Ngày Sinh</th>
                        <th>Số Điện Thoại</th>
                        <th>Địa Chỉ</th>
                        <th class="table-actions">Thao Tác</th>
                    </tr>
                    </thead>
                    <tbody id="employeeTableBody">
                    <!-- Employee data will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <nav aria-label="Phân trang" class="mt-4">
        <ul class="pagination justify-content-center" id="pagination">
            <!-- Pagination will be generated here -->
        </ul>
    </nav>
</div>

<!-- Add Employee Modal -->
<div class="modal fade" id="addEmployeeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="bi bi-person-plus me-2"></i>Thêm Nhân Viên Mới
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addEmployeeForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Họ Tên *</label>
                            <input type="text" class="form-control" name="fullName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Giới Tính *</label>
                            <select class="form-select" name="gender" required>
                                <option value="">Chọn giới tính</option>
                                <option value="Nam">Nam</option>
                                <option value="Nữ">Nữ</option>
                            </select>
                        </div>
                        <!-- CHANGE: Added date of birth field -->
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Ngày Sinh *</label>
                            <input type="date" class="form-control" name="dateOfBirth" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Số Điện Thoại *</label>
                            <input type="tel" class="form-control" name="phone" required>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Địa Chỉ *</label>
                            <textarea class="form-control" name="address" rows="2" required></textarea>
                        </div>
                        <!-- CHANGE: Changed username to email format -->
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tên Tài Khoản (Email) *</label>
                            <input type="email" class="form-control" name="username" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Mật Khẩu *</label>
                            <input type="password" class="form-control" name="password" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" onclick="addEmployee()">
                    <i class="bi bi-check-circle me-2"></i>Thêm Nhân Viên
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Employee Modal -->
<div class="modal fade" id="editEmployeeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-square me-2"></i>Sửa Thông Tin Nhân Viên
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editEmployeeForm">
                    <input type="hidden" name="employeeId">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Mã Nhân Viên</label>
                            <input type="text" class="form-control" name="employeeCode" readonly>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Họ Tên *</label>
                            <input type="text" class="form-control" name="fullName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Giới Tính *</label>
                            <select class="form-select" name="gender" required>
                                <option value="Nam">Nam</option>
                                <option value="Nữ">Nữ</option>
                            </select>
                        </div>
                        <!-- CHANGE: Added date of birth field for edit -->
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Ngày Sinh *</label>
                            <input type="date" class="form-control" name="dateOfBirth" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Số Điện Thoại *</label>
                            <input type="tel" class="form-control" name="phone" required>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Địa Chỉ *</label>
                            <textarea class="form-control" name="address" rows="2" required></textarea>
                        </div>
                    </div>
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Tên tài khoản và mật khẩu không thể sửa ở đây. Vui lòng sử dụng chức năng "Xem" để xem thông tin tài khoản.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-warning" onclick="updateEmployee()">
                    <i class="bi bi-check-circle me-2"></i>Cập Nhật
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Employee Modal -->
<div class="modal fade" id="viewEmployeeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">
                    <i class="bi bi-eye me-2"></i>Thông Tin Chi Tiết Nhân Viên
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- CHANGE: Removed photo section -->
                <div class="row">
                    <div class="col-12">
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Mã Nhân Viên:</strong></td>
                                <td id="viewEmployeeCode"></td>
                            </tr>
                            <tr>
                                <td><strong>Họ Tên:</strong></td>
                                <td id="viewFullName"></td>
                            </tr>
                            <tr>
                                <td><strong>Giới Tính:</strong></td>
                                <td id="viewGender"></td>
                            </tr>
                            <tr>
                                <td><strong>Ngày Sinh:</strong></td>
                                <td id="viewDateOfBirth"></td>
                            </tr>
                            <tr>
                                <td><strong>Số Điện Thoại:</strong></td>
                                <td id="viewPhone"></td>
                            </tr>
                            <tr>
                                <td><strong>Địa Chỉ:</strong></td>
                                <td id="viewAddress"></td>
                            </tr>
                        </table>
                    </div>
                </div>

                <!-- Account Information Section -->
                <div class="card mt-3">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0"><i class="bi bi-shield-lock me-2"></i>Thông Tin Tài Khoản</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Tên Tài Khoản:</strong>
                                <p id="viewUsername" class="text-primary"></p>
                            </div>
                            <div class="col-md-6">
                                <strong>Mật Khẩu:</strong>
                                <p id="viewPassword" class="text-danger font-monospace"></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteEmployeeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle me-2"></i>Xác Nhận Xóa
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa nhân viên <strong id="deleteEmployeeName"></strong>?</p>
                <p class="text-danger"><small>Hành động này không thể hoàn tác!</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="bi bi-trash me-2"></i>Xóa
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // CHANGE: Updated sample data with date of birth and removed photo
    let employees = [
        {
            id: 1,
            employeeCode: 'NV001',
            fullName: 'Nguyễn Văn An',
            gender: 'Nam',
            dateOfBirth: '1990-05-15',
            phone: '0123456789',
            address: '123 Đường ABC, Quận 1, TP.HCM',
            username: 'nguyenvanan@email.com',
            password: 'password123'
        },
        {
            id: 2,
            employeeCode: 'NV002',
            fullName: 'Trần Thị Bình',
            gender: 'Nữ',
            dateOfBirth: '1992-08-20',
            phone: '0987654321',
            address: '456 Đường XYZ, Quận 2, TP.HCM',
            username: 'tranthibinh@email.com',
            password: 'password456'
        },
        {
            id: 3,
            employeeCode: 'NV003',
            fullName: 'Lê Văn Cường',
            gender: 'Nam',
            dateOfBirth: '1988-12-10',
            phone: '0369852147',
            address: '789 Đường DEF, Quận 3, TP.HCM',
            username: 'levancuong@email.com',
            password: 'password789'
        }
    ];

    let currentPage = 1;
    let itemsPerPage = 10;
    let filteredEmployees = [...employees];
    let deleteEmployeeId = null;


    function validateForm(formData, isEdit = false) {
        let errors = [];
        const fullName = formData.get('fullName') ? formData.get('fullName').trim() : '';
        if (!fullName) {
            errors.push('Vui lòng nhập tên nhân viên');
        } else if (fullName.length > 30) {
            errors.push('Vui lòng nhập không quá 30 ký tự');
        } else if (!/^[a-zA-ZÀ-ỹ\s]+$/.test(fullName)) {
            errors.push('Tên nhân viên không được chứa ký tự đặc biệt');
        }
        if (!formData.get('gender') || formData.get('gender') === '') {
            errors.push('Vui lòng chọn giới tính');
        }
        const dateOfBirth = formData.get('dateOfBirth');
        if (!dateOfBirth) {
            errors.push('Vui lòng nhập ngày sinh');
        } else {
            const birthDate = new Date(dateOfBirth);
            const today = new Date();
            const age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            if (isNaN(birthDate.getTime())) {
                errors.push('Ngày sinh không hợp lệ');
            } else if (age < 18) {
                errors.push('Độ tuổi không hợp lệ');
            }
        }
        const phone = formData.get('phone') ? formData.get('phone').trim() : '';
        if (!phone) {
            errors.push('Vui lòng nhập số điện thoại');
        } else if (!/^\d+$/.test(phone)) {
            errors.push('Số điện thoại chỉ được chứa ký tự số');
        } else if (phone.length !== 10 && phone.length !== 11) {
            errors.push('Số điện thoại phải có 10 hoặc 11 chữ số');
        } else if (!phone.startsWith('0')) {
            errors.push('Số điện thoại phải bắt đầu từ số 0');
        }
        const address = formData.get('address') ? formData.get('address').trim() : '';
        if (!address) {
            errors.push('Vui lòng nhập địa chỉ');
        } else if (address.length > 100) {
            errors.push('Vui lòng nhập không quá 100 ký tự');
        } else if (!/^[a-zA-ZÀ-ỹ0-9\s\.,\-]+$/.test(address)) {
            errors.push('Địa chỉ không được chứa ký tự đặc biệt');
        }
        if (!isEdit) {
            const username = formData.get('username') ? formData.get('username').trim() : '';
            if (!username) {
                errors.push('Vui lòng nhập Tên tài khoản');
            } else if (username.length > 30) {
                errors.push('Email không được vượt quá 30 ký tự');
            } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(username)) {
                errors.push('Vui lòng nhập đúng định dạng email');
            } else {
                const existingUser = employees.find(emp => emp.username === username);
                if (existingUser) {
                    errors.push('Email này đã được sử dụng, vui lòng nhập email khác');
                }
            }
            const password = formData.get('password') ? formData.get('password').trim() : '';
            if (!password) {
                errors.push('Vui lòng nhập mật khẩu');
            } else if (password.length < 6) {
                errors.push('Mật khẩu phải có ít nhất 6 ký tự');
            } else if (password.length > 20) {
                errors.push('Mật khẩu không được vượt quá 20 ký tự');
            } else if (!/(?=.*[a-zA-Z])(?=.*\d)/.test(password)) {
                errors.push('Mật khẩu phải bao gồm chữ cái và chữ số');
            } else if (/\s/.test(password)) {
                errors.push('Mật khẩu không được chứa khoảng trắng');
            }
        }
        return errors;
    }

    function showErrors(errors, modalId) {
        // Remove existing error alerts
        const existingAlerts = document.querySelectorAll(`#${modalId} .alert-danger`);
        existingAlerts.forEach(alert => alert.remove());

        if (errors.length > 0) {
            const errorHTML = `
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Lỗi:</strong>
                        <ul class="mb-0 mt-2">
                            ${errors.map(error => `<li>${error}</li>`).join('')}
                        </ul>
                    </div>
                `;

            const modalBody = document.querySelector(`#${modalId} .modal-body`);
            modalBody.insertAdjacentHTML('afterbegin', errorHTML);

            // Scroll to top of modal to show errors
            modalBody.scrollTop = 0;
        }
    }

    // Generate next employee code
    function generateEmployeeCode() {
        const maxId = Math.max(...employees.map(emp => parseInt(emp.employeeCode.replace('NV', ''))), 0);
        return `NV${String(maxId + 1).padStart(3, '0')}`;
    }

    // Render employee table
    function renderEmployeeTable() {
        const tbody = document.getElementById('employeeTableBody');
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentEmployees = filteredEmployees.slice(startIndex, endIndex);

        tbody.innerHTML = currentEmployees.map(employee => `
                <tr>
                    <td><span class="badge bg-primary">${employee.employeeCode}</span></td>
                    <td>${employee.fullName}</td>
                    <td>
                        <span class="badge ${employee.gender === 'Nam' ? 'bg-info' : 'bg-success'}">
                            ${employee.gender}
                        </span>
                    </td>
                    <td>${new Date(employee.dateOfBirth).toLocaleDateString('vi-VN')}</td>
                    <td>${employee.phone}</td>
                    <td>${employee.address}</td>
                    <td class="table-actions">
                        <button class="btn btn-sm btn-outline-info me-1" onclick="viewEmployee(${employee.id})" title="Xem">
                            <i class="bi bi-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-warning me-1" onclick="editEmployee(${employee.id})" title="Sửa">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteEmployee(${employee.id})" title="Xóa">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

        renderPagination();
    }

    // Render pagination
    function renderPagination() {
        const totalPages = Math.ceil(filteredEmployees.length / itemsPerPage);
        const pagination = document.getElementById('pagination');

        let paginationHTML = '';

        // Previous button
        paginationHTML += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Trước</a>
                </li>
            `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                    </li>
                `;
        }

        // Next button
        paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Sau</a>
                </li>
            `;

        pagination.innerHTML = paginationHTML;
    }

    // Change page
    function changePage(page) {
        const totalPages = Math.ceil(filteredEmployees.length / itemsPerPage);
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            renderEmployeeTable();
        }
    }

    // Search and filter
    function filterEmployees() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const genderFilter = document.getElementById('genderFilter').value;

        filteredEmployees = employees.filter(employee => {
            const matchesSearch = employee.fullName.toLowerCase().includes(searchTerm) ||
                employee.phone.includes(searchTerm) ||
                employee.employeeCode.toLowerCase().includes(searchTerm);
            const matchesGender = !genderFilter || employee.gender === genderFilter;

            return matchesSearch && matchesGender;
        });

        currentPage = 1;
        renderEmployeeTable();
    }

    // Clear filters
    function clearFilters() {
        document.getElementById('searchInput').value = '';
        document.getElementById('genderFilter').value = '';
        filteredEmployees = [...employees];
        currentPage = 1;
        renderEmployeeTable();
    }

    // Add employee
    function addEmployee() {
        const form = document.getElementById('addEmployeeForm');
        const formData = new FormData(form);

        // Validate form data
        const errors = validateForm(formData, false);

        if (errors.length > 0) {
            showErrors(errors, 'addEmployeeModal');
            return;
        }

        const newEmployee = {
            id: Date.now(),
            employeeCode: generateEmployeeCode(),
            fullName: formData.get('fullName').trim(),
            gender: formData.get('gender'),
            dateOfBirth: formData.get('dateOfBirth'),
            phone: formData.get('phone').trim(),
            address: formData.get('address').trim(),
            username: formData.get('username').trim(),
            password: formData.get('password').trim()
        };

        employees.push(newEmployee);
        filteredEmployees = [...employees];
        renderEmployeeTable();

        // Close modal and reset form
        bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal')).hide();
        form.reset();

        // Show success message
        alert('Thêm nhân viên thành công!');
    }

    // View employee
    function viewEmployee(id) {
        const employee = employees.find(emp => emp.id === id);
        if (!employee) return;

        document.getElementById('viewEmployeeCode').textContent = employee.employeeCode;
        document.getElementById('viewFullName').textContent = employee.fullName;
        document.getElementById('viewGender').textContent = employee.gender;
        document.getElementById('viewDateOfBirth').textContent = new Date(employee.dateOfBirth).toLocaleDateString('vi-VN');
        document.getElementById('viewPhone').textContent = employee.phone;
        document.getElementById('viewAddress').textContent = employee.address;
        document.getElementById('viewUsername').textContent = employee.username;
        document.getElementById('viewPassword').textContent = employee.password;

        new bootstrap.Modal(document.getElementById('viewEmployeeModal')).show();
    }

    // Edit employee
    function editEmployee(id) {
        const employee = employees.find(emp => emp.id === id);
        if (!employee) return;

        const form = document.getElementById('editEmployeeForm');
        form.employeeId.value = employee.id;
        form.employeeCode.value = employee.employeeCode;
        form.fullName.value = employee.fullName;
        form.gender.value = employee.gender;
        form.dateOfBirth.value = employee.dateOfBirth;
        form.phone.value = employee.phone;
        form.address.value = employee.address;

        new bootstrap.Modal(document.getElementById('editEmployeeModal')).show();
    }

    // Update employee
    function updateEmployee() {
        const form = document.getElementById('editEmployeeForm');
        const formData = new FormData(form);

        // Validate form data (excluding username and password)
        const errors = validateForm(formData, true);

        if (errors.length > 0) {
            showErrors(errors, 'editEmployeeModal');
            return;
        }

        const employeeId = parseInt(formData.get('employeeId'));
        const employeeIndex = employees.findIndex(emp => emp.id === employeeId);

        if (employeeIndex !== -1) {
            employees[employeeIndex] = {
                ...employees[employeeIndex],
                fullName: formData.get('fullName').trim(),
                gender: formData.get('gender'),
                dateOfBirth: formData.get('dateOfBirth'),
                phone: formData.get('phone').trim(),
                address: formData.get('address').trim()
            };

            filteredEmployees = [...employees];
            renderEmployeeTable();

            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('editEmployeeModal')).hide();

            // Show success message
            alert('Cập nhật thông tin nhân viên thành công!');
        }
    }

    // Delete employee
    function deleteEmployee(id) {
        const employee = employees.find(emp => emp.id === id);
        if (!employee) return;

        deleteEmployeeId = id;
        document.getElementById('deleteEmployeeName').textContent = employee.fullName;
        new bootstrap.Modal(document.getElementById('deleteEmployeeModal')).show();
    }

    // Confirm delete
    function confirmDelete() {
        if (deleteEmployeeId) {
            employees = employees.filter(emp => emp.id !== deleteEmployeeId);
            filteredEmployees = [...employees];
            renderEmployeeTable();

            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('deleteEmployeeModal')).hide();

            // Show success message
            alert('Xóa nhân viên thành công!');
            deleteEmployeeId = null;
        }
    }

    document.getElementById('addEmployeeModal').addEventListener('show.bs.modal', function() {
        const existingAlerts = this.querySelectorAll('.alert-danger');
        existingAlerts.forEach(alert => alert.remove());
    });

    document.getElementById('editEmployeeModal').addEventListener('show.bs.modal', function() {
        const existingAlerts = this.querySelectorAll('.alert-danger');
        existingAlerts.forEach(alert => alert.remove());
    });

    // Event listeners for search
    document.getElementById('searchInput').addEventListener('input', filterEmployees);
    document.getElementById('genderFilter').addEventListener('change', filterEmployees);

    // Initialize
    renderEmployeeTable();
</script>
</body>
</html>
